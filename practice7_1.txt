package 자바1수업;

import java.util.ArrayList;

public class 일곱번째수업_21_10_28 {
	public static void main(String[] args) {
		// 7일차 수업내용-----------------------------------------------------------------------------------------------------
	
		//개발자 라면 git사용을 할줄 알아야 한다 -> 지원서 접수시에도 git링크를 보내 나의 코드를 보고 평가하는데도 많이 사용한다.
		//코드를 자주 저장해 두어라
		
		//익숙해 지면 브렌치 라는 기술 연습
		
		
		//게시판을 만들며 코드를 붙여나가면 복잡해 진다  -> 효율적으로 코드 사용 해야 한다.
		//폴더를 만들어 코드, 이미지등을 파일에 모아두고 / 수정하기 전에 백업 파일을 따로 하나더 만들어 완전성을 높일 수 있다(되돌리기 유용하다.)
		//-> 이렇게 파일을 만들다 보면 너무 많아진다 -> 폴더 단위로(날짜 별로) 사용한다. -> 원복 시키기 쉽다
		//문제점 -> 결국에는 폴더도 많아지면 관리하기 힘들어 진다.
		//내각 적절한 시점에 사진을 찍어 두고 원할때 돌아가게 해준다 (파일 수정 이력을 관리 해준다)  ==> git(자바에서 미리 만들어 놓은 프로그램)
		
		//git다운로드 -> 자신의 컴퓨터에 맞는것 선택(64비트 윈도우) -> next클릭 (계속) -> 마지막 아무것도 체크X -> 완료 
		//-> 윈도우 git검색 -> 클릭 -> 검은 화면 -> 명령어 몇가지를 알아야 한다(명령어로 실행시키는 프로그램)
		
		//폴더와 파일명은 영어로 만들어 주기!!!
		//-----------------------------------------------------------------------------------------------------------------
		//개념-------------------------------------------------------------------------------------------------------
		//컴퓨터 저장소 > 폴더1 > 파일a, 파일b
		//파일a, 파일b시점을 사진으로 찍어 따로 똑같은 형태의 구조로 저장을 해둔다.
		//원본 파일이 손상 되면 원할때 복사본을 가지고와 되돌릴 수 있다.
		//저장해두는 저장소 ==> git repository (git프로그램이 자동으로 해준다)
		//저장소를 만들어 달라고 명령한다
		//저장소 만드는 방법-------------------------------
		//원하는 파일 우클릭 -> git bash here 클릭 -> git init치고 엔터
		//깃 저장소 생성
		//여러개의 원본 파일에서 작업이 완료된 파일이 생기면(작업공간,워크트리) -> (인덱스)원하는 완성된 파일만 추가를 시킨다 -> (깃저장소)반영된다. 
		//저장하는 방법 ->
		//index에 올리는 명령어 git add 파일명(이때 폴더를 잘 확인하여 원하는 폴더가 맞는지 잘 확인한다)
		//ex. git add aaa.txt  //전체를 올리고 싶은 경우 git add file??찾아보기
		//
		//git commit -m"" -> 깃 저장소에 반영??  (안되면 ''사용???)
		
		
		//인덱스에 올라간 파일을 깃저장소에 반영(인덱스에 올라온 파일만 반영 가능) -> git commit -m "메세지" (공백 중요!!)
		//메세지 => 나중에 작업한 파일이 무엇인지 알아 볼 수 있도록 개발자가 남긴다.(ex특정 파일을 추가함...)
		//5.추가를 하기 위해서는 자신이 누구인지 밝혀야 가능하다(추후에 협업을 할 경우를 대비해서) / == 유저 정보를 남겨야 한다
		//깃  유저 정보 등록 -->>
		//-> git config --local user.name "github nickname"(폴더에 국한 작업자명이)(한개의 컴퓨터에 다수의 사용자가 사용할 경우)
		//-> git config --global user.email "github email"(한 컴퓨터를 한명이 사용할 경우) / 유저 이메일 잘 기억!!
		//코드를 공유 저장소에 사용할 저장소의 이름과 같은 이름을 사용하는 것이 좋다
		//이것은 컴퓨터 내에서 이루어 지는 것이라 파일이 날라가면 모두 없어짐으로 원격 저장소에 안전하게 저장한다
		//원격 저장소는 유료도 있지만 무료로 많이 사용하는 -> github사용(아이디 만들기, 유저네임과 메일은 통일 해준다)
		//개발자에 있어서 git은 필수 알아야 하는 항복이다. 
		
		//github에 저장소만드는 방법
		//create responsitory -> descreption프로젝트 설명 -> public으로 만든다 -> 만들어진다 -> 맨위에(원격 저장소 주소)
		//원격저장소에 올리는 방법
		//git push 원격지 주소(복사후 -> 우클릭 paste) master
		
		// -> 또 저장하기 위해 추가적으로 github홈페이지에서 약간의 셋팅이 필요
		//github 우측 상단 -> 셋팅 -> develope setting -> gneerate new token -> personal access tokens(토큰을 받아야 푸시 가능) 
		//-> 이름을 정해주고<rapo체크> 제널이이트 토큰 주소를 알아야 한다(다른곳에 저장??)
		
		//git push 원격지 주소(복사후 -> 우클릭 paste) master ->user name등록하라고 하면 github username 입력
		//-> password는 비밀번호가 아니라 발급받은 토큰 주소를 입력  ---> 비로서 푸시(업로드) 성공
		
		//github 새로고침을 통해 잘 올라갔는지 획인...
		
		//다른 컴퓨터(프로젝트가 날라 갔을때) github에서 가지고 오는 방법 ->  git pull 원격지 주소 master
		//(로컬로 만든경우 한번더 해주어야 한다.)
		
		//완료 되면 이러한 과정으로 우측 상단에 your project에서 new project를 계속 만들수 있다.
		//토큰의 경우 한번 했으면 이제 주소 링크가 아닌 진짜 비빌번호 입력이 가능하다??(부정확 -> 알아보기)
		
		
		
		
		
		//git 명령어----------------------------------------------------------------------------------------------------
		//1.깃 저장소 만들기  -> git init
		//2.현재 git상태 보기 -> git status => 빨갛게 뜨는 파일 이름 원본과 복사 파일의 차이점을 분석해준다 -> 다른점을 제시
		//저장이 똑같이 되어있으면 녹색(깃 저장소에 올릴 준비가 되어있다.), 인덱스에 올라가지 않으면 빨간색
		//3.저장소애 저장하고 싶은 파일을 인덱스에 먼저 올리기 -> git add 파일명(공백 중요)
		//4. 인덱스에 올라간 파일을 깃저장소에 반영(인덱스에 올라온 파일만 반영 가능) -> git commit -m "메세지"(공백 중요!!)
		//메세지 => 나중에 작업한 파일이 무엇인지 알아 볼 수 있도록 개발자가 남긴다.(ex특정 파일을 추가함...)
		//5.추가를 하기 위해서는 자신이 누구인지 밝혀야 가능하다(추후에 협업을 할 경우를 대비해서) / == 유저 정보를 남겨야 한다
		//깃  유저 정보 등록 -> git config --local user.name ""(폴더에 국한 작업자명이)(한개의 컴퓨터에 다수의 사용자가 사용할 경우)
		//                ->git config --global user.email ""(한 컴퓨터를 한명이 사용할 경우) / 유저 이메일 잘 기억!!
		//코드를 공유 저장소에 사용할 저장소의 이름과 같은 이름을 사용하는 것이 좋다
		//이것은 컴퓨터 내에서 이루어 지는 것이라 파일이 날라가면 모두 없어짐으로 원격 저장소에 안전하게 저장한다
		//8.git 저장소 원격저장소에 업로드(token을 발급 받아서 로그인) -> git push 원격지 주소 master
		//9.원격저장소 소스 당겨오기 -> git pull 원격주소 master
		
		
		
		//요약-------------------------------------------------------------------------------------------------------------
		
//		1. 깃 저장소 만들기
//		  -> git init
//
//		2. 현재 git 상태 보기
//		  -> git status
//
//		3. 저장소에 저장하고 싶은 파일을 인덱스에 먼저 올리기
//		  -> git add 파일명
//
//		4. 인덱스에 올라간 파일을 깃 저장소에 반영
//		  -> git commit -m "메시지"
//
//		5. github.com 가입
//
//		6. 깃 유저 정보 등록(github 가입 정보로 등록)
//		  -> git config --local user.name "github nickname" 
//		  -> git config --local user.email "github email"
//
//		7. 원격저장소 만들기
//
//		8. git 저장소 원격저장소에 업로드 (token 발급 받아서 로그인)
//		  -> git push 원격지 주소 master 
//
//		9. 원격저장소 소스 당겨오기
//		  -> git pull 원격지 주소 master  
		
		
		
		
		//--------------------------------------------------------------------------------------------------------------
		//---------------------------------------------------------------------------------------------------------------
		//이클립스 에서 자바 소스코드파일 찾는 방법???
		//소스코드 파일 우클릭 -> 아래 프로파틱스(properties) -> 로케이션(주소) 오른쪽 클릭 -> 파일로 이동?????????
		
		
		
		
		//---------------------------------------------------------------------------------------------------------------
		//ArrayList
		//---------------------------------------------------------------------------------------------------------------
		//
		//배열 -> 한계가 있다 -> 길이 고정 -> 공간을 효율적 사용X -> 추가X, 삭제X -> 알고리즘 구현 -> 복잡
		//길이가 무조건 정해져야 한다.
		//배열을 적게 만들면 데이터 저장을 많이 못 한다. / 많이 만들면 공간이 낭비 된다
		//
		//해결 방안 --> ArrayList(자바에서 만들어 놓은 코드) 삭제에 있어 유용하다
		//        ==> 작은 저장공간을 만들어 놓고 필요에 따라 조금식 공간을 늘려 준다.
		//배열의 한계를 극복하고 역할은 비슷한 역할을 수행한다.
		
		//배열
		int[] arr = new int[10]; //10
		
		//빨간줄 뜨면 ctrl + shift(좌) + o  == import를 해준다.
		//리스트 선언 방법--------------------------------------------   //  <자료형을 Integer을 사용> 
		ArrayList<Integer> list = new ArrayList<Integer>();
		
		//변수,배열 -> 데이터를 관리(추가, 삭제, 조회, 수정)
		
		//리스트의 크기 확인 -> size()
		System.out.println(list.size()); //배열의 크기를 return(반환)해 준다.
		
		//추가-> add(value)가장 마지막 요소가 뒤에 추가
		list.add(100);
		System.out.println(list.size());
		list.add(200);
		System.out.println(list.size());
		list.add(300); //add를 하면 할 수록 저장공간이 저절로 조금씩 커진다.
		System.out.println(list.size());  // -> 크기가 점점 커진다.
		
		//조회(데이터 가져오기) -> get(); / 메서드 -> ()괄호가 열고 닫히는 것
	    System.out.println(arr[0]);  //배열 방식
		System.out.println(list.get(0)); //리스트 방식  ==> 첫 번째 저장 된것을 가지고 와라
		
		//삭제 -> list.remove(index);
		list.remove(1);
		System.out.println(list.get(1));
		
		//수정 -> list.set(index, value) == index값을 value로 바꾸겠다.
		list.set();
		System.out.println(list.get(0));
		
		
		
		
	}

}
